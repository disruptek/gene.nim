(macro gene/assert [expr message = ("" expr " is NOT true.")]
  (if not (caller_eval expr)
    (println message)
  )
)

(class gene/Object
  (method class _
    ($get_class self)
  )

  (method to_s _
    (call_native "gene_to_s" self)
  )
)

(class gene/Class
  (fn new [name parent]
    (call_native "class_new" name parent)
  )

  (method name _
    (call_native "class_name" self)
  )

  (method parent _
    (call_native "class_parent" self)
  )
)

(class gene/Nil
)

(class gene/Bool
)

(class gene/Int
  (method times block
    (for i in (range 0 self)
      (block i)
    )
  )

  (method to_json _
    self
  )
)

(class gene/Char
)

(class gene/String
  (method size _
    (call_native "str_size" self)
  )

  (method substr [start end = nil]
    (if start
      (if end
        (call_native "str_substr" self start end)
      else
        (call_native "str_substr" self start)
      )
    else
      (not_allowed "Start index is required")
    )
  )

  (method split [sep limit = nil]
    (if limit
      (call_native "str_split" self sep limit)
    else
      (call_native "str_split" self sep)
    )
  )

  (method index s
    (call_native "str_index" self s)
  )

  (method rindex s
    (call_native "str_rindex" self s)
  )

  (method char_at i
    (call_native "str_char_at" self i)
  )

  (method trim _
    (call_native "str_trim" self)
  )

  (method starts_with s
    (call_native "str_starts_with" self s)
  )

  (method ends_with s
    (call_native "str_ends_with" self s)
  )

  (method ends_with s
    (call_native "str_ends_with" self s)
  )

  (method to_upper_case _
    (call_native "str_to_upper_case" self)
  )

  (method to_lower_case _
    (call_native "str_to_lower_case" self)
  )
)

(class gene/Symbol
)

(class gene/Array
  (method size _
    (call_native "array_size" self)
  )

  (method get i
    (call_native "array_get" self i)
  )

  (method set [i item]
    (call_native "array_set" self i item)
  )

  (method add item
    (call_native "array_add" self item)
  )

  (method del i
    (call_native "array_del" self i)
  )

  (method each block
    (for item in self
      (block item)
    )
  )

  (method map block
    (var result [])
    (for item in self
      (result .add (block item))
    )
    result
  )

  (method filter block
    (var result [])
    (for item in self
      (if (block item)
        (result .add item)
      )
    )
    result
  )

  (method to_json _
    (var result "[")
    (result + "]")
  )
)

(class gene/Map
  (method size _
    (call_native "map_size" self)
  )

  (method keys _
    (var result [])
    (for [k _] in self
      (result .add k)
    )
    result
  )

  (method values _
    (var result [])
    (for [_ v] in self
      (result .add v)
    )
    result
  )

  (method map block
    (var result [])
    (for [k v] in self
      (result .add (block k v))
    )
    result
  )

  (method each block
    (for [k v] in self
      (block k v)
    )
  )
)

(class gene/Gene
  (method type _
  )

  (method props _
  )

  (method prop _
  )

  (method data _
  )

  (method get [i]
  )
)

(class gene/Regex
)

(class gene/File
  (method new _
    (not_allowed "File objects can not be created with (new File ...)")
  )

  (method read _
    (call_native "file_read" self)
  )

  (method close _
    (call_native "file_close" self)
  )

  (fn open name
    (call_native "file_open" name)
  )

  (fn read name
    (call_native "file_read" name)
  )

  (fn write [name content]
    (call_native "file_write" name content)
  )
)

(ns gene/os
  (fn exec [cmd args...]
    (call_native "os_exec" cmd args)
  )
)

(class gene/Json
  (fn parse json_string
    (call_native "json_parse" json_string)
  )
)
