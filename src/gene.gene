(macro gene/assert [expr message = ("" expr " is NOT true.")]
  (if not (caller_eval expr)
    (println message)
  )
)
(var global/assert gene/assert)

(macro gene/with [name value body...]
  (var expr
    :(do
      (var %name %value)
      %body...
      %name ))
  (caller_eval expr)
)
(var global/with gene/with)

(macro gene/debug expr
  (var s (expr .to_s))
  (println s " begin")
  (var result (caller_eval expr))
  (println s " end => " result)
  result
)
(var global/debug gene/debug)

# (fn gene/base64 s
#   (call_native "base64" s)
# )
(var gene/base64 gene/native/base64)

# (fn gene/sleep time_in_ms
#   (call_native "sleep" time_in_ms)
# )
(var gene/sleep gene/native/sleep)

# (fn gene/sleep_async time_in_ms
#   (call_native "sleep_async" time_in_ms)
# )
(var gene/sleep_async gene/native/sleep_async)

(class gene/Object
  (method class _
    ($get_class self)
  )

  (native_method is gene/native/object_is)

  (native_method to_s gene/native/object_to_s)

  (native_method to_json gene/native/object_to_json)
)

(class gene/Class
  # (fn new [name parent]
  #   (call_native "class_new" name parent)
  # )
  (var /new gene/native/class_new)

  # (method name _
  #   (call_native "class_name" self)
  # )
  (native_method name gene/native/class_name)

  # (method parent _
  #   (call_native "class_parent" self)
  # )
  (native_method parent gene/native/class_parent)
)

(class gene/Exception     # All exceptions should inherit from this class
  # (method message _
  #   (call_native "exception_message" self)
  # )
  (native_method message gene/native/exception_message)

  # (method extra _       # additional data related to the exception
  # )
)

(var global/Exception gene/Exception)

(class gene/Nil
)

(class gene/Bool
)

(class gene/Int
  (method times block
    (for i in (range 0 self)
      (block i)
    )
  )

  (method to_json _
    self
  )
)

(class gene/Char
)

(class gene/String
  # (method size _
  #   (call_native "str_size" self)
  # )
  (native_method size gene/native/str_size)

  # (method append args...
  #   (call_native "str_append" self args...)
  # )
  (native_method append gene/native/str_append)
  (native_method size gene/native/str_size)
  (native_method substr gene/native/str_substr)
  (native_method split gene/native/str_split)

  # (method substr [start end = nil]
  #   (if start
  #     (if end
  #       (call_native "str_substr" self start end)
  #     else
  #       (call_native "str_substr" self start)
  #     )
  #   else
  #     (not_allowed "Start index is required")
  #   )
  # )

  # (method split [sep limit = nil]
  #   (if limit
  #     (call_native "str_split" self sep limit)
  #   else
  #     (call_native "str_split" self sep)
  #   )
  # )

  (method lines _
    (self .split "\n")
  )

  # (method index s
  #   (call_native "str_index" self s)
  # )
  (native_method index gene/native/str_index)

  # (method rindex s
  #   (call_native "str_rindex" self s)
  # )
  (native_method rindex gene/native/str_rindex)

  # (method char_at i
  #   (call_native "str_char_at" self i)
  # )
  (native_method char_at gene/native/str_char_at)

  # (method trim _
  #   (call_native "str_trim" self)
  # )
  (native_method trim gene/native/str_trim)

  # (method starts_with s
  #   (call_native "str_starts_with" self s)
  # )
  (native_method starts_with gene/native/str_starts_with)

  # (method ends_with s
  #   (call_native "str_ends_with" self s)
  # )
  (native_method ends_with gene/native/str_ends_with)

  # (method to_upper_case _
  #   (call_native "str_to_upper_case" self)
  # )
  (native_method to_upper_case gene/native/str_to_upper_case)

  # (method to_lower_case _
  #   (call_native "str_to_lower_case" self)
  # )
  (native_method to_lower_case gene/native/str_to_lower_case)
)

(class gene/Symbol
)

(class gene/Date
  # (method year _
  #   (call_native "date_year" self)
  # )
  (native_method year gene/native/date_year)
)

(class gene/DateTime
  # (method year _
  #   (call_native "date_year" self)
  # )
  (native_method year gene/native/date_year)
)

(class gene/Time
  # (method hour _
  #   (call_native "time_hour" self)
  # )
  (native_method hour gene/native/time_hour)
)

(class gene/Timezone
)

# (fn gene/today _
#   (call_native "date_today")
# )
(var gene/today gene/native/date_today)

(fn gene/yesterday _
)

(fn gene/tomorrow _
)

# (fn gene/now _
#   (call_native "time_now")
# )
(var gene/now gene/native/time_now)

(class gene/Array
  # (method size _
  #   (call_native "array_size" self)
  # )
  (native_method size gene/native/array_size)

  # (method get i
  #   (call_native "array_get" self i)
  # )
  (native_method get gene/native/array_get)

  # (method set [i item]
  #   (call_native "array_set" self i item)
  # )
  (native_method set gene/native/array_set)

  # (method add item
  #   (call_native "array_add" self item)
  # )
  (native_method add gene/native/array_add)

  # (method del i
    # (call_native "array_del" self i)
  # )
  (native_method del gene/native/array_del)

  (method join [with = ""]
    (gene/with s ""
      (for [i item] in self
        (s .append (item .to_s) (if (i < (.size)) with))
      )
    )
  )

  (method each block
    (for item in self
      (block item)
    )
  )

  (method map block
    (var result [])
    (for item in self
      (result .add (block item))
    )
    result
  )

  (method filter block
    (var result [])
    (for item in self
      (if (block item)
        (result .add item)
      )
    )
    result
  )
)

(class gene/Map
  # (method size _
  #   (call_native "map_size" self)
  # )
  (native_method size gene/native/map_size)

  (method keys _
    (var result [])
    (for [k _] in self
      (result .add k)
    )
    result
  )

  (method values _
    (var result [])
    (for [_ v] in self
      (result .add v)
    )
    result
  )

  (method map block
    (var result [])
    (for [k v] in self
      (result .add (block k v))
    )
    result
  )

  (method each block
    (for [k v] in self
      (block k v)
    )
  )
)

(class gene/Gene
  # (method type _
  #   (call_native "gene_type" self)
  # )
  (native_method type gene/native/gene_type)

  # (method props _
  #   (call_native "gene_props" self)
  # )
  (native_method props gene/native/gene_props)

  (method prop name
  )

  # (method data _
  #   (call_native "gene_data" self)
  # )
  (native_method data gene/native/gene_data)

  (method get [i]
  )
)

(class gene/Regex
)

(class gene/Application
)

(class gene/Package
  # (method name _
  #   (call_native "package_name" self)
  # )
  (native_method name gene/native/package_name)

  # (method version _
  #   (call_native "package_version" self)
  # )
  (native_method version gene/native/package_version)
)

(class gene/Future
  (method on_success blk
    ($on_future_success self blk)
  )

  (method on_failure blk
    ($on_future_failure self blk)
  )

  # (method finished _
  #   (call_native "future_finished" self)
  # )
  (native_method finished gene/native/future_finished)

  # Use (async) to create Future
  # (fn new _
  #   (call_native "future_new")
  # )
)

(class gene/File
  (method new _
    (not_allowed "File objects can not be created with (new File ...)")
  )

  (method read _
    # (call_native "file_close" self)
    (gene/native/file_read self)
  )

  (method close _
    # (call_native "file_close" self)
    (gene/native/file_close self)
  )

  # (fn open name
  #   (call_native "file_open" name)
  # )
  (var /open gene/native/file_open)

  # (fn read name
  #   (call_native "file_read" name)
  # )
  (var /read gene/native/file_read)

  # (fn read_async name
  #   (call_native "file_read_async" name)
  # )
  (var /read_async gene/native/file_read_async)

  # (fn write [name content]
  #   (call_native "file_write" name content)
  # )
  (var /write gene/native/file_write)
)

(ns gene/os
  # (fn exec [cmd args...]
  #   (call_native "os_exec" cmd args)
  # )
  (var /exec gene/native/os_exec)
)

(ns gene/json
  # (fn parse json_string
  #   (call_native "json_parse" json_string)
  # )
  (var /parse gene/native/json_parse)
)

(class gene/AssertionError < gene/Exception
)

(var global/AssertionError gene/AssertionError)

(ns global/nim) # Namespace for Nim classes

(class nim/CatchableError   # Base class for Nim exception classes
  # (method message _
  #   (call_native "exception_message" self)
  # )
  (native_method message gene/native/exception_message)
)
